AWSTemplateFormatVersion: "2010-09-09"
Transform:
    - AWS::LanguageExtensions

Parameters:
  ProductName:
    Type: String
    Default: 'woning-bot'
    Description: The name of the product
  EnvironmentCode:
    Type: String
    Default: 'test'
    AllowedValues:
      - test
      - stg
      - prod
      - sandbox
    Description: The environment code used in the naming of all AWS services.
  WebAppImage:
    Type: String
    Description: The image of the web app
  DiscordPublicKey:
    Type: String
    Description: The public key of the discord bot
  DiscordBotToken:
    Type: String
    Description: The token of the discord bot
  GeocodingApiKey:
    Type: String
    Description: The API key for the geocoding service


Description: 'This template deploys the cloud infrastructure for the BOM usage reporter web app'

Conditions:
  IsProduction: !Equals
    - !Ref EnvironmentCode
    - prod

Resources:
  # # # # # # # # # # # # # # #
  # # # # Lambda web app  # # #
  # # # # # # # # # # # # # # #

  ScraperLambda:
    Type: AWS::Lambda::Function
    Properties:
      Architectures:
        - x86_64
      Code:
        ImageUri: !Ref WebAppImage
      Description: "Woningbot Scraper"
      FunctionName:
        Fn::Sub: "lambda-${EnvironmentCode}-${ProductName}-scraper"
      MemorySize: 1024
      Timeout: 600
      PackageType: Image
      Role: !GetAtt LambdaIAMRole.Arn
      Environment:
        Variables:
          MAIL_CONFIG_REF: "NA"
          DATA_BUCKET:
            Ref: DataS3Bucket
          HOUSES_KEY: "house_data.csv"
          SUBSCRIBERS_KEY: "subscribers.csv"
          DISCORD_PUBLIC_KEY: !Ref DiscordPublicKey
          DISCORD_BOT_TOKEN: !Ref DiscordBotToken #TODO: secure this token
          GEOCODING_API_KEY: !Ref GeocodingApiKey #TODO: secure this token


  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt ScraperLambda.Arn
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt InvokeRule.Arn

  InvokeRule:
    Type: AWS::Events::Rule
    Properties:
      Description: "Scrape every 4 minutes"
      Name: "scrape-rule"
      #RoleArn: String
      ScheduleExpression: "rate(4 minutes)"
      State: "ENABLED"
      Targets:
        - Arn: !GetAtt ScraperLambda.Arn
          Id:
            Fn::Sub: "${ProductName}-scraper-lambda"
#          RoleArn: String

  LambdaUrl:
    Type: AWS::Lambda::Url
    Properties:
      AuthType: NONE
      Cors:
        AllowCredentials: true
        #        AllowHeaders:
        #          - String
        AllowMethods:
          - POST
        AllowOrigins:
          - "*"
        MaxAge: 0
      InvokeMode: BUFFERED
      TargetFunctionArn: !GetAtt ScraperLambda.Arn

  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunctionUrl
      FunctionName: !GetAtt ScraperLambda.Arn
      FunctionUrlAuthType: NONE
      Principal: "*"

  DataS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        Fn::Sub: "s3-${AWS::Region}-${EnvironmentCode}-${ProductName}-storage"
      AccessControl: Private
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: 'AES256'
      VersioningConfiguration:
        Status: Suspended

#  SubscribersTable:
#    Type: AWS::DynamoDB::Table
#    Properties:
#      AttributeDefinitions:
#        - AttributeDefinition
#      BillingMode: PAY_PER_REQUEST
#      ContributorInsightsSpecification:
#         Enabled: ENABLE
#      GlobalSecondaryIndexes:
#        - GlobalSecondaryIndex
#      KeySchema:
#        - KeySchema
#      LocalSecondaryIndexes:
#        - LocalSecondaryIndex
#      TableClass: STANDARD
#      TableName:
#        Fn::Sub: "dynamodb-${EnvironmentCode}-${ProductName}-subscribers"
#      TimeToLiveSpecification:
#        TimeToLiveSpecification

  LambdaIAMRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName:
        Fn::Sub: "iam-${AWS::Region}-${EnvironmentCode}-${ProductName}-lambda-role"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: 'root'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: arn:aws:logs:*:*:*
        - PolicyName: 'S3'
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "s3:GetBucketLocation"
                  - "s3:ListObjectsInBucket"
                  - "s3:*Object"
                Resource:
                  - Fn::Join: [ "", [ !GetAtt DataS3Bucket.Arn, "/*" ] ]
                  - !GetAtt DataS3Bucket.Arn
