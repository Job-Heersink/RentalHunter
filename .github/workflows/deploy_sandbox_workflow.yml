name: Deploy Sandbox with CloudFormation

on:
  push:
    branches:
      - main

jobs:
#  test:
#    name: Execute Pytest on each branch
#    runs-on: ubuntu-latest
#
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v3
#
#      - name: Set up Python
#        uses: actions/setup-python@v4
#        with:
#          python-version: '3.11'
#          cache: 'pip'
#
#      - name: Install dependencies
#        run: |
#          pip install --upgrade pip
#          pip install -r requirements.txt
#          pip install pytest pytest-xdist pytest-asyncio
#
#      - name: Run Pytest
#        run: pytest

  deploy:
    needs: test
    name: Deploy using CloudFormation
    runs-on: ubuntu-latest
    environment: sandbox

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install boto3

      - name: docker login
        env:
          REGION: ${{ vars.AWS_REGION }}
          AWS_ECR_REPO: ${{ secrets.AWS_ECR_REPO }}
        run: |
          aws ecr get-login-password --region $REGION | docker login --username AWS --password-stdin $AWS_ECR_REPO

      - name: docker build
        env:
          IMAGE_NAME: ${{ vars.IMAGE_NAME }}
          AWS_ECR_REPO: ${{ secrets.AWS_ECR_REPO }}
        run: |
          export IMAGE_URI=$AWS_ECR_REPO/$IMAGE_NAME:latest
          docker build -t $IMAGE_NAME .
          docker tag $IMAGE_NAME:latest $IMAGE_URI

      - name: docker push
        env:
          IMAGE_NAME: ${{ vars.IMAGE_NAME }}
          AWS_ECR_REPO: ${{ secrets.AWS_ECR_REPO }}
        run: |
          docker push $IMAGE_URI

      - name: Deploy to cloudformation
        env:
          CF_REGION: ${{ vars.AWS_REGION }}
          CF_ENV_CODE: ${{ vars.ENV_CODE }}
          CF_APPLICATION: ${{ vars.APPLICATION_NAME }}
          DISCORD_PUBLIC_KEY: ${{ secrets.DISCORD_PUBLIC_KEY }}
          DISCORD_BOT_TOKEN: ${{ secrets.DISCORD_BOT_TOKEN }}
          GEOCODING_API_KEY: ${{ secrets.GEOCODING_API_KEY }}
        run: |
          python3 cloudformation/update_cloudformation.py

      - name: Deploy code to lambda
        env:
          ENVIRONMENT: ${{ vars.ENV_CODE }}
          APPLICATION_NAME: ${{ vars.APPLICATION_NAME }}
          IMAGE_NAME: ${{ vars.IMAGE_NAME }}
          AWS_ECR_REPO: ${{ secrets.AWS_ECR_REPO }}
          REGION: ${{ vars.AWS_REGION }}
        run: |
          FUNCTION_NAME=lambda-$ENV_CODE-$APPLICATION_NAME-scraper
          IMAGE_URI=$AWS_ECR_REPO/$IMAGE_NAME:latest
          UPDATE_RETURN=$(aws lambda update-function-code --function-name $FUNCTION_NAME --image-uri $IMAGE_URI --region $REGION)

          STATUS='InProgress'
          while [ "$STATUS" == "InProgress" ]
          do
            sleep 3
            STATUS=$(aws lambda get-function --function-name $FUNCTION_NAME --region $REGION --query "Configuration.LastUpdateStatus" --output text)
            echo $STATUS
          done
          echo "Update complete"
