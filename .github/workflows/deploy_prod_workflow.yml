name: Deploy Sandbox with CloudFormation

on:
  push:
    branches:
      - main

jobs:
#  test:
#    name: Execute Pytest on each branch
#    runs-on: ubuntu-latest
#
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v3
#
#      - name: Set up Python
#        uses: actions/setup-python@v4
#        with:
#          python-version: '3.11'
#          cache: 'pip'
#
#      - name: Install dependencies
#        run: |
#          pip install --upgrade pip
#          pip install -r requirements.txt
#          pip install pytest pytest-xdist pytest-asyncio
#
#      - name: Run Pytest
#        run: pytest

  deploy:
    name: Deploy using CloudFormation
    runs-on: ubuntu-latest
    environment: prod

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install boto3

      - name: setup environment
        env:
          IMAGE_NAME: ${{ vars.IMAGE_NAME }}
          AWS_ECR_REPO: ${{ secrets.AWS_ECR_REPO }}
          ENV_CODE: ${{ vars.ENV_CODE }}
          APPLICATION_NAME: ${{ vars.APPLICATION_NAME }}
        run: |
          echo "IMAGE_URI=$AWS_ECR_REPO/$IMAGE_NAME:latest" >> $GITHUB_ENV
          echo "FUNCTION_NAME=lambda-$ENV_CODE-$APPLICATION_NAME-scraper" >> $GITHUB_ENV

#      - name: docker login
#        env:
#          REGION: ${{ vars.AWS_REGION }}
#          AWS_ECR_REPO: ${{ secrets.AWS_ECR_REPO }}
#        run: |
#          aws ecr get-login-password --region $REGION | docker login --username AWS --password-stdin $AWS_ECR_REPO
#
#      - name: docker build
#        env:
#          IMAGE_NAME: ${{ vars.IMAGE_NAME }}
#        run: |
#          docker build -t $IMAGE_NAME .
#          docker tag $IMAGE_NAME:latest $IMAGE_URI
#
#      - name: docker push
#        env:
#          IMAGE_NAME: ${{ vars.IMAGE_NAME }}
#          AWS_ECR_REPO: ${{ secrets.AWS_ECR_REPO }}
#        run: |
#          docker push $IMAGE_URI

      - name: Deploy to cloudformation
        env:
          ENVIRONMENT_CODE: ${{ vars.ENV_CODE }}
          PRODUCT_NAME: ${{ vars.APPLICATION_NAME }}
          DISCORD_PUBLIC_KEY: ${{ secrets.DISCORD_PUBLIC_KEY }}
          DISCORD_BOT_TOKEN: ${{ secrets.DISCORD_BOT_TOKEN }}
          GEOCODING_API_KEY: ${{ secrets.GEOCODING_API_KEY }}
          TEMPLATE: "cloudformation/app_stack.yaml"
        run: |
          STACK_NAME="$PRODUCT_NAME-$ENVIRONMENT_CODE-stack"
          echo "STACK_NAME=$STACK_NAME" >> $GITHUB_ENV
          
          function deploy_stack() {
            local CAPABILITIES="CAPABILITY_NAMED_IAM CAPABILITY_AUTO_EXPAND CAPABILITY_IAM"

            if ! aws cloudformation describe-stacks --stack-name $1 --output text --query "Stacks[0].StackId"; then
              echo "Creating stack $1"
              aws cloudformation create-stack --stack-name $1 --template-body file://$2 --parameters $3 --capabilities $CAPABILITIES
              echo "Waiting for stack to be created"
              aws cloudformation wait stack-create-complete --stack-name $1 && echo "Stack created!"
            else
              echo "Updating stack $1"
              if aws cloudformation update-stack --stack-name $1 --template-body file://$2 --parameters $3 --capabilities $CAPABILITIES; then
                echo "CloudFormation stack update successful"
                echo "Waiting for stack to be updated"
                aws cloudformation wait stack-update-complete --stack-name $1 && echo "Stack updated!"
              elif [ $? -eq 254 ]; then
                echo "No updates to be performed."
              else
                echo "CloudFormation stack update failed."
              return 1
              fi
            fi

            return 0
          }
          
          deploy_stack $STACK_NAME $TEMPLATE "ParameterKey=EnvironmentCode,ParameterValue=$ENVIRONMENT_CODE" "ParameterKey=ProductName,ParameterValue=$PRODUCT_NAME ParameterKey=EnvironmentCode,ParameterValue=$ENVIRONMENT_CODE ParameterKey=DISCORD_PUBLIC_KEY,ParameterValue=$DISCORD_PUBLIC_KEY ParameterKey=DISCORD_BOT_TOKEN,ParameterValue=$DISCORD_BOT_TOKEN ParameterKey=GEOCODING_API_KEY,ParameterValue=$GEOCODING_API_KEY ParameterKey=WEB_APP_IMAGE,ParameterValue=$IMAGE_URI"

      - name: Deploy code to lambda
        env:
          REGION: ${{ vars.AWS_REGION }}
        run: |
          UPDATE_RETURN=$(aws lambda update-function-code --function-name $FUNCTION_NAME --image-uri $IMAGE_URI --region $REGION)

          STATUS='InProgress'
          while [ "$STATUS" == "InProgress" ]
          do
            sleep 3
            STATUS=$(aws lambda get-function --function-name $FUNCTION_NAME --region $REGION --query "Configuration.LastUpdateStatus" --output text)
            echo $STATUS
          done
          echo "Update complete"
